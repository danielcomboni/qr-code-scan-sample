{"version":3,"sources":["logo.svg","components/scan/HandleScanQRCode.ts","components/scan/ScanQRCode.tsx","App.js","reportWebVitals.js","index.js"],"names":["HandleScanQRCode","codeReader","reset","document","getElementById","textContent","hidden","console","log","selectedDeviceId","decodeFromVideoDevice","result","err","getText","ZXing","error","getAllCameras","then","cams","sourceSelect","childNodes","length","forEach","child","remove","deviceId","camValues","Map","element","set","label","value","key","sourceOption","createElement","text","appendChild","onchange","BrowserMultiFormatReader","listVideoInputDevices","CameraSelectionPanel","className","id","VideoCardPanel","width","style","border","VideoScanResult","ScanQRCode","state","qrCodeResult","allCameras","startScan","resetCamera","displayCamerasNames","this","type","onClick","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"6NAAe,I,0CCGMA,E,8IAOjBA,EAAiBC,WAAWC,QAC5BC,SAASC,eAAe,UAAWC,YAAc,GACjDF,SAASC,eAAe,kBAAmBE,QAAS,EACpDC,QAAQC,IAAI,Y,kCAMZL,SAASC,eAAe,iBAAkBE,QAAS,EACnDH,SAASC,eAAe,kBAAmBE,QAAS,EACpDC,QAAQC,IAAR,cACSR,EAAiBS,iBAD1B,eACiDT,EAAiBC,aAGlED,EAAiBC,WAAWS,sBAC1BV,EAAiBS,iBACjB,SACA,SAACE,EAAQC,GACHD,IACFJ,QAAQC,IAAIG,GACZR,SAASC,eAAe,iBAAkBE,QAAS,EACnDH,SAASC,eAAe,kBAAmBE,QAAS,EACpDH,SAASC,eAAe,UAAWC,YAAcM,EAAOE,UACxDN,QAAQC,IAAI,cAAeG,EAAOE,WAClCb,EAAiBC,WAAWC,UAE1BU,GAASA,aAAeE,qBAC1BP,QAAQQ,MAAMH,MAKpBL,QAAQC,IAAR,uDACkDR,EAAiBS,qB,4CAMnET,EAAiBgB,gBAAgBC,MAAK,SAACC,GACrC,IAAMC,EAAehB,SAASC,eAC5B,gBAGEe,EAAcC,WAAWC,OAAS,IACxB,OAAZF,QAAY,IAAZA,KAAcC,WAAWE,SAAQ,SAACC,GAAD,OAAWA,EAAMC,aAGpDxB,EAAiBS,iBAAmBS,EAAK,GAAGO,SAC5C,IAAIC,EAAY,IAAIC,IAEhBT,EAAKG,QAAU,GACjBH,EAAKI,SAAQ,SAACM,GACZF,EAAUG,IAAID,EAAQH,SAAUG,EAAQE,UAI5CJ,EAAUJ,SAAQ,SAACS,EAAOC,GACxB,IAAMC,EAAe9B,SAAS+B,cAAc,UAC5CD,EAAaE,KAAOJ,EACpBE,EAAaF,MAAQC,EACT,OAAZb,QAAY,IAAZA,KAAciB,YAAYH,MAG5Bd,EAAckB,SAAW,WACvBrC,EAAiBS,iBAAjB,OAAoCU,QAApC,IAAoCA,OAApC,EAAoCA,EAAcY,Y,sCAQtD,OAFA/B,EAAiBC,WAAa,IAAIqC,2BACftC,EAAiBC,WAClBsC,4B,KAjFDvC,EACLS,sB,EADKT,EAELC,gB,YC0BVuC,EAAuB,WAC3B,OACE,sBAAKC,UAAU,mBAAmBC,GAAG,oBAArC,UACE,qBAAKD,UAAU,sBAAf,SACE,uBAAOA,UAAU,mBAAjB,uBAEF,wBAAQA,UAAU,gBAAgBC,GAAG,qBAKrCC,EAAiB,WACrB,OACE,sBAAKF,UAAU,OAAOnC,QAAQ,EAAMoC,GAAG,gBAAvC,UACE,oBAAID,UAAU,cAAd,8CACA,qBAAKA,UAAU,YAAf,SACE,8BACE,uBACEC,GAAG,QACHE,MAAM,OACNC,MAAO,CAAEC,OAAQ,4BAQvBC,EAAkB,WACtB,OACE,sBAAKN,UAAU,OAAOnC,QAAQ,EAAMoC,GAAG,iBAAvC,UACE,oBAAID,UAAU,cAAd,4BACA,qBAAKA,UAAU,YAAf,SAEE,mBAAGA,UAAU,YAAYC,GAAG,iBAmIrBM,E,4MA/CbC,MAAQ,CACNC,aAAc,GACdC,WAAY,I,EAGdC,UAAY,kBAAMpD,EAAiBoD,a,EAEnCC,YAAc,kBAAMrD,EAAiBqD,e,EAErCrC,cAAgB,kBAAMhB,EAAiBsD,uB,uDAOrC,OADAC,KAAKvC,gBAEH,sBAAKyB,UAAU,YAAf,UACE,wBAAQe,KAAK,SAASf,UAAU,oBAAoBC,GAAG,cAAce,QAASF,KAAKH,UAAnF,kBAIA,wBACEI,KAAK,SACLf,UAAU,oBACVC,GAAG,cACHe,QAASF,KAAKF,YAJhB,mBASA,wBACEG,KAAK,SACLf,UAAU,oBACVgB,QAASF,KAAKvC,cAHhB,yBAQA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GA1CiB0C,aCzIVC,MARf,WACE,OACE,qBAAKlB,UAAU,MAAf,SACE,cAAC,EAAD,OCMSmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7C,MAAK,YAAkD,IAA/C8C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAEL,cAAC,EAAD,IAGFlE,SAASC,eAAe,SAM1BwD,M","file":"static/js/main.b4423049.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import * as ZXing from \"@zxing/library\";\r\nimport { BrowserMultiFormatReader } from \"@zxing/library\";\r\n\r\nexport default class HandleScanQRCode {\r\n  public static selectedDeviceId: any;\r\n  public static codeReader: BrowserMultiFormatReader;\r\n\r\n  public openCamera(): void {}\r\n\r\n  public static resetCamera(): void {\r\n    HandleScanQRCode.codeReader.reset();\r\n    document.getElementById(\"result\")!.textContent = \"\";\r\n    document.getElementById(\"result-card-id\")!.hidden = true;\r\n    console.log(\"Reset.\");\r\n  }\r\n\r\n  public static startScan(): /** selectedDeviceId: any,\r\n    codeReader: BrowserMultiFormatReader */\r\n  void {\r\n    document.getElementById(\"video-card-id\")!.hidden = false;\r\n    document.getElementById(\"result-card-id\")!.hidden = true;\r\n    console.log(\r\n      `res:${HandleScanQRCode.selectedDeviceId} -- ${HandleScanQRCode.codeReader}`\r\n    );\r\n\r\n    HandleScanQRCode.codeReader.decodeFromVideoDevice(\r\n      HandleScanQRCode.selectedDeviceId,\r\n      \"video\",\r\n      (result, err) => {\r\n        if (result) {\r\n          console.log(result);\r\n          document.getElementById(\"video-card-id\")!.hidden = true;\r\n          document.getElementById(\"result-card-id\")!.hidden = false;\r\n          document.getElementById(\"result\")!.textContent = result.getText();\r\n          console.log(\"the result:\", result.getText());\r\n          HandleScanQRCode.codeReader.reset();\r\n        }\r\n        if (err && !(err instanceof ZXing.NotFoundException)) {\r\n          console.error(err);\r\n          // document.getElementById(\"result\").textContent = err;\r\n        }\r\n      }\r\n    );\r\n    console.log(\r\n      `Started continous decode from camera with id ${HandleScanQRCode.selectedDeviceId}`\r\n    );\r\n  }\r\n\r\n  // public clearQRCodeScanResult = () => (this.qrCodeScanResult = \"\");\r\n  public static displayCamerasNames(): void {\r\n    HandleScanQRCode.getAllCameras().then((cams) => {\r\n      const sourceSelect = document.getElementById(\r\n        \"sourceSelect\"\r\n      ) as HTMLSelectElement;\r\n\r\n      if (sourceSelect!.childNodes.length > 0) {\r\n        sourceSelect?.childNodes.forEach((child) => child.remove());\r\n      }\r\n\r\n      HandleScanQRCode.selectedDeviceId = cams[0].deviceId;\r\n      let camValues = new Map();\r\n      // place camera in Map to avoid repetition\r\n      if (cams.length >= 1) {\r\n        cams.forEach((element) => {\r\n          camValues.set(element.deviceId, element.label);\r\n        });\r\n      }\r\n      // populate camera dropdown list\r\n      camValues.forEach((value, key) => {\r\n        const sourceOption = document.createElement(\"option\");\r\n        sourceOption.text = value;\r\n        sourceOption.value = key;\r\n        sourceSelect?.appendChild(sourceOption);\r\n      });\r\n      // choose camera\r\n      sourceSelect!.onchange = () => {\r\n        HandleScanQRCode.selectedDeviceId = sourceSelect?.value;\r\n      };\r\n    });\r\n  }\r\n\r\n  public static getAllCameras(): Promise<MediaDeviceInfo[]> {\r\n    HandleScanQRCode.codeReader = new BrowserMultiFormatReader();\r\n    const codeReader = HandleScanQRCode.codeReader;\r\n    return codeReader.listVideoInputDevices();\r\n  }\r\n}\r\n\r\n// const performScan = () => {\r\n//   let selectedDeviceId;\r\n//   const codeReader = new BrowserMultiFormatReader();\r\n//   console.log(\"ZXing code reader initialized\");\r\n//   codeReader\r\n//     .listVideoInputDevices()\r\n//     .then((videoInputDevices) => {\r\n//       const sourceSelect = document.getElementById(\"sourceSelect\");\r\n//       selectedDeviceId = videoInputDevices[0].deviceId;\r\n//       if (videoInputDevices.length >= 1) {\r\n//         videoInputDevices.forEach((element) => {\r\n//           const sourceOption = document.createElement(\"option\");\r\n//           sourceOption.text = element.label;\r\n//           sourceOption.value = element.deviceId;\r\n//           sourceSelect.appendChild(sourceOption);\r\n//         });\r\n\r\n//         sourceSelect.onchange = () => {\r\n//           selectedDeviceId = sourceSelect.value;\r\n//         };\r\n\r\n//         // const sourceSelectPanel = document.getElementById('sourceSelectPanel')\r\n//         // sourceSelectPanel.style.display = 'block'\r\n//       }\r\n\r\n//       document.getElementById(\"startButton\").addEventListener(\"click\", () => {\r\n//         // const screenWidth = screen.width;\r\n//         // const screenHeight = screen.height;\r\n\r\n//         // // add device detection\r\n//         // if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\r\n//         //     document.getElementById('video').width = screenWidth - 1000\r\n//         //     document.getElementById('video').height = screenHeight - 20\r\n//         // } else {\r\n//         //     document.getElementById('video').width = screenWidth\r\n//         //     // document.getElementById('video').height = screenHeight - 20\r\n//         // }\r\n\r\n//         document.getElementById(\"video-card-id\").hidden = false;\r\n//         document.getElementById(\"result-card-id\").hidden = true;\r\n\r\n//         codeReader.decodeFromVideoDevice(\r\n//           selectedDeviceId,\r\n//           \"video\",\r\n//           (result, err) => {\r\n//             if (result) {\r\n//               console.log(result);\r\n\r\n//               document.getElementById(\"video-card-id\").hidden = true;\r\n//               document.getElementById(\"result-card-id\").hidden = false;\r\n//               document.getElementById(\"result\").textContent = result.getText();\r\n//               console.log(\"the result:\", result.getText());\r\n//               codeReader.reset();\r\n//             }\r\n//             if (err && !(err instanceof ZXing.NotFoundException)) {\r\n//               // console.error(err);\r\n//               // document.getElementById(\"result\").textContent = err;\r\n//             }\r\n//           }\r\n//         );\r\n//         console.log(\r\n//           `Started continous decode from camera with id ${selectedDeviceId}`\r\n//         );\r\n//       });\r\n\r\n//       document.getElementById(\"resetButton\").addEventListener(\"click\", () => {\r\n//         codeReader.reset();\r\n//         document.getElementById(\"result\").textContent = \"\";\r\n//         document.getElementById(\"result-card-id\").hidden = true;\r\n//         console.log(\"Reset.\");\r\n//       });\r\n//     })\r\n//     .catch((err) => {\r\n//       console.error(err);\r\n//     });\r\n// };\r\n","import React, { Component } from \"react\";\r\nimport { ButtonTypeButton, justConsoleIt } from \"../Buttons/Buttons\";\r\nimport * as ZXing from \"@zxing/library\";\r\n// import { BrowserMultiFormatReader } from \"@zxing/library/esm/browser\";\r\nimport HandleScanQRCode from \"./HandleScanQRCode\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import 'bootstrap/dist/css/bootstrap.css'; // commented out but has no issues\r\n// Put any other imports below so that CSS from your\r\n// components takes precedence over default styles.\r\n\r\nconst Buttons = (props: any) => {\r\n  return (\r\n    <div\r\n      className=\"btn-group\"\r\n      role=\"group\"\r\n      aria-label=\"\"\r\n      style={{ paddingTop: \"10px\" }}\r\n    >\r\n      <button type=\"button\" className=\"btn btn-secondary\" id=\"startButton\">\r\n        Scan\r\n      </button>\r\n\r\n      {/* <ButtonTypeButton\r\n        className={\"btn btn-secondary\"}\r\n        name={\"Reset\"}\r\n        id={\"resetButton\"}\r\n      /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CameraSelectionPanel = (/*props: Array<string> */) => {\r\n  return (\r\n    <div className=\"input-group mb-3\" id=\"sourceSelectPanel\">\r\n      <div className=\"input-group-prepend\">\r\n        <label className=\"input-group-text\">Options</label>\r\n      </div>\r\n      <select className=\"custom-select\" id=\"sourceSelect\"></select>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst VideoCardPanel = () => {\r\n  return (\r\n    <div className=\"card\" hidden={true} id=\"video-card-id\">\r\n      <h5 className=\"card-header\">Focus camera on barcode(qr code)</h5>\r\n      <div className=\"card-body\">\r\n        <div>\r\n          <video\r\n            id=\"video\"\r\n            width=\"100%\"\r\n            style={{ border: \"0px solid gray\" }}\r\n          ></video>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst VideoScanResult = () => {\r\n  return (\r\n    <div className=\"card\" hidden={true} id=\"result-card-id\">\r\n      <h5 className=\"card-header\">decoded result</h5>\r\n      <div className=\"card-body\">\r\n        {/* <h5 className=\"card-title\">Count</h5> */}\r\n        <p className=\"card-text\" id=\"result\"></p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// const performScan = () => {\r\n//   let selectedDeviceId: any;\r\n//   const codeReader = new BrowserMultiFormatReader();\r\n//   console.log(\"ZXing code reader initialized\");\r\n//   codeReader\r\n//     .listVideoInputDevices()\r\n//     .then((videoInputDevices) => {\r\n//       const sourceSelect = document.getElementById(\"sourceSelect\")! as HTMLSelectElement;\r\n//       selectedDeviceId = videoInputDevices[0].deviceId;\r\n//       if (videoInputDevices.length >= 1) {\r\n//         videoInputDevices.forEach((element) => {\r\n//           const sourceOption = document.createElement(\"option\");\r\n//           sourceOption.text = element.label;\r\n//           sourceOption.value = element.deviceId;\r\n//           sourceSelect.appendChild(sourceOption);\r\n//         });\r\n\r\n//         sourceSelect.onchange = () => {\r\n//           selectedDeviceId = sourceSelect.value;\r\n//         };\r\n\r\n//         // const sourceSelectPanel = document.getElementById('sourceSelectPanel')\r\n//         // sourceSelectPanel.style.display = 'block'\r\n//       }\r\n\r\n//       document.getElementById(\"startButton\")!.addEventListener(\"click\", () => {\r\n//         // const screenWidth = screen.width;\r\n//         // const screenHeight = screen.height;\r\n\r\n//         // // add device detection\r\n//         // if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\r\n//         //     document.getElementById('video').width = screenWidth - 1000\r\n//         //     document.getElementById('video').height = screenHeight - 20\r\n//         // } else {\r\n//         //     document.getElementById('video').width = screenWidth\r\n//         //     // document.getElementById('video').height = screenHeight - 20\r\n//         // }\r\n\r\n//         document.getElementById(\"video-card-id\")!.hidden = false;\r\n//         document.getElementById(\"result-card-id\")!.hidden = true;\r\n\r\n//         codeReader.decodeFromVideoDevice(\r\n//           selectedDeviceId,\r\n//           \"video\",\r\n//           (result, err) => {\r\n//             if (result) {\r\n//               console.log(result);\r\n\r\n//               document.getElementById(\"video-card-id\")!.hidden = true;\r\n//               document.getElementById(\"result-card-id\")!.hidden = false;\r\n//               document.getElementById(\"result\")!.textContent = result.getText();\r\n//               console.log(\"the result:\", result.getText());\r\n//               codeReader.reset();\r\n//             }\r\n//             if (err && !(err instanceof ZXing.NotFoundException)) {\r\n//               // console.error(err);\r\n//               // document.getElementById(\"result\").textContent = err;\r\n//             }\r\n//           }\r\n//         );\r\n//         console.log(\r\n//           `Started continous decode from camera with id ${selectedDeviceId}`\r\n//         );\r\n//       });\r\n\r\n//       document.getElementById(\"resetButton\")!.addEventListener(\"click\", () => {\r\n//         codeReader.reset();\r\n//         document.getElementById(\"result\")!.textContent = \"\";\r\n//         document.getElementById(\"result-card-id\")!.hidden = true;\r\n//         console.log(\"Reset.\");\r\n//       });\r\n//     })\r\n//     .catch((err) => {\r\n//       console.error(err);\r\n//     });\r\n// };\r\n\r\nclass ScanQRCode extends Component {\r\n  state = {\r\n    qrCodeResult: \"\",\r\n    allCameras: []\r\n  };\r\n\r\n  startScan = () => HandleScanQRCode.startScan();\r\n\r\n  resetCamera = () => HandleScanQRCode.resetCamera();\r\n\r\n  getAllCameras = () => HandleScanQRCode.displayCamerasNames();\r\n\r\n\r\n\r\n  render() {\r\n    // performScan();\r\n    this.getAllCameras();\r\n    return (\r\n      <div className=\"container\">\r\n        <button type=\"button\" className=\"btn btn-secondary\" id=\"startButton\" onClick={this.startScan}>\r\n          Scan\r\n      </button>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-secondary\"\r\n          id=\"resetButton\"\r\n          onClick={this.resetCamera}\r\n        >\r\n          Reset\r\n        </button>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-secondary\"\r\n          onClick={this.getAllCameras}\r\n        >\r\n          all cameras\r\n        </button>\r\n\r\n        <CameraSelectionPanel />\r\n        <VideoCardPanel />\r\n        <VideoScanResult />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ScanQRCode;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport ScanQRCode from \"./components/scan/ScanQRCode\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ScanQRCode />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />\n  // </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}