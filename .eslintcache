[{"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\index.js":"1","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\App.js":"2","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\reportWebVitals.js":"3","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\Buttons\\Buttons.js":"4","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\scan\\HandleScanQRCode.ts":"5","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\scan\\ScanQRCode.tsx":"6","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\constants\\Constants.ts":"7","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\main\\Main.tsx":"8","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\main\\MainBody.tsx":"9","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\header\\Header.tsx":"10","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\sidebar\\Sidebar.tsx":"11","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\accordion\\Accordion.tsx":"12","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\table\\TableTest.tsx":"13","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\constants\\Workflow.ts":"14","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\table\\Table.tsx":"15","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\Utils\\collections\\Map.ts":"16","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\Utils\\collections\\List.ts":"17","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\table\\TableBody.tsx":"18","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\table\\TableHeader.tsx":"19","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\store\\store.ts":"20","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\router\\index.tsx":"21","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\home\\HomePage.tsx":"22","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\home\\TestPage.tsx":"23","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\Utils\\Dom.ts":"24","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\gotchas\\ErrorBoundary.tsx":"25","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\transfers\\TransferForm.tsx":"26","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\scan\\HandleQRCodeWriting.ts":"27","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\subcomponents\\DatePicker.tsx":"28","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\subcomponents\\Checkbox.tsx":"29"},{"size":705,"mtime":1613918220028,"results":"30","hashOfConfig":"31"},{"size":194,"mtime":1613918200682,"results":"32","hashOfConfig":"31"},{"size":362,"mtime":499162500000,"results":"33","hashOfConfig":"31"},{"size":225,"mtime":1611663781160,"results":"34","hashOfConfig":"31"},{"size":2974,"mtime":1615379190966,"results":"35","hashOfConfig":"31"},{"size":6854,"mtime":1615643150585,"results":"36","hashOfConfig":"31"},{"size":31,"mtime":1611997269676,"results":"37","hashOfConfig":"31"},{"size":418,"mtime":1613917900580,"results":"38","hashOfConfig":"31"},{"size":393,"mtime":1613918182514,"results":"39","hashOfConfig":"31"},{"size":2894,"mtime":1613916380135,"results":"40","hashOfConfig":"31"},{"size":1759,"mtime":1613919798886,"results":"41","hashOfConfig":"31"},{"size":10269,"mtime":1613570281478,"results":"42","hashOfConfig":"31"},{"size":6964,"mtime":1613767011284,"results":"43","hashOfConfig":"31"},{"size":1302,"mtime":1613845773475,"results":"44","hashOfConfig":"31"},{"size":985,"mtime":1613845195251,"results":"45","hashOfConfig":"31"},{"size":1967,"mtime":1613231630389,"results":"46","hashOfConfig":"31"},{"size":1252,"mtime":1613231630381,"results":"47","hashOfConfig":"31"},{"size":1025,"mtime":1613918130575,"results":"48","hashOfConfig":"31"},{"size":428,"mtime":1613846340465,"results":"49","hashOfConfig":"31"},{"size":719,"mtime":1613469469727,"results":"50","hashOfConfig":"31"},{"size":1025,"mtime":1613920224776,"results":"51","hashOfConfig":"31"},{"size":659,"mtime":1613918580158,"results":"52","hashOfConfig":"31"},{"size":448,"mtime":1613564632934,"results":"53","hashOfConfig":"31"},{"size":132,"mtime":1611673410808,"results":"54","hashOfConfig":"31"},{"size":766,"mtime":1613817923521,"results":"55","hashOfConfig":"31"},{"size":7028,"mtime":1614240347699,"results":"56","hashOfConfig":"31"},{"size":508,"mtime":1613936697462,"results":"57","hashOfConfig":"31"},{"size":637,"mtime":1613974176770,"results":"58","hashOfConfig":"31"},{"size":616,"mtime":1613970292354,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"v8s7m",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"75"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"75"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"75"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\index.js",[],["129","130"],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\App.js",[],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\reportWebVitals.js",[],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\Buttons\\Buttons.js",[],["131","132"],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\scan\\HandleScanQRCode.ts",["133","134","135"],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\scan\\ScanQRCode.tsx",["136","137"],"import React, { Component } from \"react\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Main from \"../main/Main\";\r\nimport Header from \"../header/Header\";\r\nimport Sidebar from \"../sidebar/Sidebar\";\r\nimport MainBody from \"../main/MainBody\";\r\nimport './video.css'\r\n\r\nimport * as ZXing from \"@zxing/library\";\r\nimport { BrowserMultiFormatReader, PDF417Reader } from \"@zxing/library\";\r\n\r\n// dropdown list of cameras available\r\nconst CameraSelectionPanel = () => {\r\n  return (\r\n    <div className=\"input-group mb-3\" id=\"sourceSelectPanel\">\r\n      <div className=\"input-group-prepend\">\r\n        <label className=\"input-group-text\">Camera options</label>\r\n      </div>\r\n      <select className=\"custom-select\" id=\"sourceSelect\"></select>\r\n    </div>\r\n  );\r\n};\r\n\r\n// video scan area\r\n\r\nconst VideoCardPanel = ({ hideVideo, hideResult, result, deviceId, codeReader, cameras }: IScanQRCodeState) => {\r\n\r\n  const mystyle = {\r\n    position: \"absolute\",\r\n    top: \"100px\",\r\n    color: \"#FFF\",\r\n    textAlign: \"center\",\r\n    fontSize: \"20px\",\r\n    backgroundColor: \"rgba(221, 221, 221, 0.3)\",\r\n    width: \"640px\",\r\n    padding: \"10px 0\",\r\n    zIndex: \"2147483647\"\r\n  };\r\n  return (\r\n    <div className=\"card\" hidden={hideVideo} id=\"video-card-id\">\r\n      <h5 className=\"card-header\">Focus camera on barcode(qr code)</h5>\r\n      <div className=\"card-body\">\r\n        <div>\r\n\r\n          <video\r\n            id=\"video\"\r\n            width=\"100%\"\r\n            // style={{ border: \"0px solid gray\" }}\r\n            style={{ zIndex: 1 }}\r\n          >\r\n            {/* <div className=\"overlay\"></div> */}\r\n\r\n            {/* <hr /> */}\r\n\r\n            {/* <div className=\"content-bottom\"> */}\r\n            <h1>Heading</h1>\r\n            {/* <p>Lorem ipsum dolor sit amet, an his etiam torquatos. Tollit soleat phaedrum te duo, eum cu recteque expetendis neglegentur. Cu mentitum maiestatis persequeris pro, pri ponderum tractatos ei. Id qui nemore latine molestiae, ad mutat oblique delicatissimi pro.</p>\r\n            <button >Pause</button> */}\r\n            {/* </div> */}\r\n\r\n            {/* <div id=\"overlay-top\"><hr></hr></div> */}\r\n\r\n          </video>\r\n\r\n\r\n          <div id=\"overlay\" className=\"overlay-top\"></div>\r\n\r\n          <div id=\"overlay-bottom\" className=\"overlay-bottom\"></div>\r\n\r\n          <div id=\"overlay-left\" className=\"overlay-left\"></div>\r\n\r\n          <div id=\"overlay-right\" className=\"overlay-right\"></div>\r\n\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// video scan result\r\nconst VideoScanResult = ({ hideVideo, hideResult, result, deviceId, codeReader, cameras }: IScanQRCodeState) => {\r\n  return (\r\n    <div className=\"card\" hidden={hideResult} id=\"result-card-id\">\r\n      <h5 className=\"card-header\">decoded result</h5>\r\n      <div className=\"card-body\">\r\n        {/* <h5 className=\"card-title\">Count</h5> */}\r\n        <p className=\"card-text\" id=\"result\">{result}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface IScanQRCodeState {\r\n  hideVideo: boolean;\r\n  hideResult: boolean;\r\n  result: string;\r\n  deviceId: any;\r\n  codeReader: BrowserMultiFormatReader;\r\n  cameras: Promise<MediaDeviceInfo[]>;\r\n}\r\n\r\nclass ScanQRCode extends Component<{}, IScanQRCodeState> {\r\n\r\n  state: IScanQRCodeState = {\r\n    hideVideo: false,\r\n    hideResult: false,\r\n    result: '',\r\n    deviceId: '',\r\n    codeReader: new BrowserMultiFormatReader(),\r\n    cameras: new Promise<MediaDeviceInfo[]>(() => { })\r\n  }\r\n\r\n  crop = () => {\r\n    const video = document.getElementById(\"video\")!;\r\n    const width = video.offsetWidth;\r\n    const height = video.offsetHeight;\r\n    console.log(width, height);\r\n  }\r\n\r\n  startScan = (): void => {\r\n\r\n    this.setState({ hideVideo: false, hideResult: true })\r\n\r\n    this.state.codeReader.decodeFromVideoDevice(this.state.deviceId, \"video\", (result, err) => {\r\n\r\n      if (result) {\r\n\r\n        this.setState({ hideVideo: true, hideResult: false, result: result.getText() })\r\n        console.log(\"the result:\", result);\r\n        this.state.codeReader.reset();\r\n\r\n      }\r\n\r\n      if (err && !(err instanceof ZXing.NotFoundException)) {\r\n        // console.error(err);\r\n        // document.getElementById(\"result\").textContent = err;\r\n      }\r\n    });\r\n    console.log(`Started continous decode from camera with id ${this.state.deviceId}`);\r\n  }\r\n\r\n  resetCamera = (): void => {\r\n    this.state.codeReader.reset();\r\n    this.setState({ hideVideo: true, hideResult: true, result: \"\" })\r\n    console.log(\"Reset.\");\r\n  }\r\n\r\n  getAllCameras = () => this.displayCamerasNames(this.state.codeReader);\r\n\r\n  displayCamerasNames = (codeReader: BrowserMultiFormatReader): void => {\r\n\r\n    this.getCameras(codeReader).then((cams) => {\r\n\r\n      const sourceSelect = document.getElementById(\"sourceSelect\")! as HTMLSelectElement;\r\n\r\n      if (sourceSelect!.childNodes.length > 0) {\r\n        sourceSelect?.childNodes.forEach((child) => child.remove());\r\n      }\r\n\r\n      let camValues = new Map();\r\n      // place camera in Map to avoid repetition\r\n      if (cams.length >= 1) {\r\n        cams.forEach((element) => {\r\n          camValues.set(element.deviceId, element.label);\r\n        });\r\n      }\r\n      // populate camera dropdown list\r\n      camValues.forEach((value, key) => {\r\n        const sourceOption = document.createElement(\"option\");\r\n        sourceOption.text = value;\r\n        sourceOption.value = key;\r\n        sourceSelect?.appendChild(sourceOption);\r\n      });\r\n      // choose camera\r\n      sourceSelect!.onchange = () => {\r\n      };\r\n    });\r\n  }\r\n\r\n  getCameras = (codeReader: BrowserMultiFormatReader): Promise<MediaDeviceInfo[]> => {\r\n    codeReader = new BrowserMultiFormatReader();\r\n\r\n    return codeReader.listVideoInputDevices();\r\n  }\r\n\r\n  render() {\r\n    this.getAllCameras();\r\n    // this.crop();\r\n    \r\n    return (\r\n\r\n      <Main>\r\n\r\n        <Header />\r\n\r\n        <Sidebar />\r\n\r\n        <MainBody>\r\n          <div className=\"container\">\r\n            <button type=\"button\" className=\"btn btn-primary m-1\" id=\"startButton\" onClick={this.startScan}>\r\n              Scan\r\n      </button>\r\n\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary m-1\"\r\n              id=\"resetButton\"\r\n              onClick={this.resetCamera}\r\n            >\r\n              Reset\r\n        </button>\r\n\r\n            <CameraSelectionPanel />\r\n            <VideoCardPanel hideVideo={this.state.hideVideo} hideResult={this.state.hideResult} result={this.state.result} deviceId={this.state.deviceId} codeReader={this.state.codeReader} cameras={this.state.cameras} />\r\n            <VideoScanResult hideVideo={this.state.hideVideo} hideResult={this.state.hideResult} result={this.state.result} deviceId={this.state.deviceId} codeReader={this.state.codeReader} cameras={this.state.cameras} />\r\n          </div>\r\n        </MainBody>\r\n\r\n      </Main>\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default ScanQRCode\r\n",["138","139"],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\constants\\Constants.ts",[],["140","141"],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\main\\Main.tsx",[],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\main\\MainBody.tsx",[],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\header\\Header.tsx",[],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\sidebar\\Sidebar.tsx",[],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\accordion\\Accordion.tsx",[],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\table\\TableTest.tsx",[],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\constants\\Workflow.ts",[],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\table\\Table.tsx",[],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\Utils\\collections\\Map.ts",[],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\Utils\\collections\\List.ts",[],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\table\\TableBody.tsx",["142"],"\r\nimport { Component } from 'react';\r\n\r\nimport IKeyValueMap from '../../Utils/collections/Map';\r\nimport { ITDAttributes } from './TableData';\r\n\r\nexport interface ITableBodyProps<K, V> {\r\n  items: IKeyValueMap<K, V>;\r\n  tdAttributes: ITDAttributes;\r\n  dataDisplayFunction: (key: string, data: any) => any\r\n}\r\n\r\nclass TableBody<K, V> extends Component<ITableBodyProps<K, V>, {}> {\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n      <tbody>\r\n        {\r\n\r\n          this.props.items.getValues().toArray().map((v, index) => {\r\n\r\n            return (<tr key={index}>\r\n              {\r\n                Object.entries(v).map(([key, value], i) => {\r\n                  if (i > 0) {\r\n                    const tdValue = this.props.dataDisplayFunction(key, value);\r\n                    return <td key={i} className={this.props.tdAttributes.className.get(key)} >{tdValue}</td>\r\n                  }\r\n                })\r\n              }\r\n            </tr>)\r\n\r\n          })\r\n\r\n        }\r\n\r\n      </tbody>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableBody;","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\table\\TableHeader.tsx",[],["143","144"],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\store\\store.ts",[],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\router\\index.tsx",["145"],"\r\nimport {\r\n  BrowserRouter as Router, Switch, Route, Link\r\n} from \"react-router-dom\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport HomePage from \"../components/home/HomePage\";\r\nimport ScanQRCode from \"../components/scan/ScanQRCode\";\r\nimport TransferForm from \"../components/transfers/TransferForm\";\r\n\r\nexport const history = createBrowserHistory();\r\n\r\n// Instead of BrowserRouter, we use the regular router,\r\n// but we pass in a customer history to it.\r\nconst AppRouter = () => {\r\n  return (\r\n    <Router>\r\n      <div>\r\n\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <Switch>\r\n\r\n          <Route path=\"/transfer-form\">\r\n            <TransferForm />\r\n          </Route>\r\n\r\n          <Route path=\"/scan\">\r\n            <ScanQRCode />\r\n          </Route>\r\n\r\n          <Route path=\"/\">\r\n            <HomePage />\r\n          </Route>\r\n        </Switch>\r\n\r\n      </div>\r\n    </Router>\r\n  )\r\n};\r\n\r\nexport default AppRouter;\r\n","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\home\\HomePage.tsx",[],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\home\\TestPage.tsx",[],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\Utils\\Dom.ts",[],["146","147"],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\gotchas\\ErrorBoundary.tsx",[],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\transfers\\TransferForm.tsx",["148","149","150","151"],"import React, { ChangeEvent, Component } from 'react';\r\nimport { jsPDF } from \"jspdf\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Main from '../main/Main';\r\nimport Header from '../header/Header';\r\nimport Sidebar from '../sidebar/Sidebar';\r\n\r\nimport MainBody from '../main/MainBody';\r\n\r\nimport logo from '../../assets/dfcu_logo.png'\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport Datepicker from '../subcomponents/DatePicker';\r\n\r\n// import * as ZXing from \"@zxing/library\";\r\nimport * as pdfMake from \"pdfmake/build/pdfmake\";\r\nimport * as pdfFonts from 'pdfmake/build/vfs_fonts';\r\nimport DatePicker from 'react-datepicker'\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\n(pdfMake as any).vfs = pdfFonts.pdfMake.vfs\r\n\r\ninterface ITransferhtmlFormState {\r\n  date: Date;\r\n  branchName: string;\r\n  htmlForeignRemittances: boolean;\r\n  eft: boolean;\r\n  rtgs: boolean;\r\n  rtgsLocal: boolean;\r\n  eaps: boolean;\r\n  repss: boolean;\r\n  htmlForeignDraft: boolean\r\n\r\n  currency: string;\r\n  amount: string;\r\n  rate: string;\r\n\r\n  qrCodeResult: string;\r\n}\r\n\r\nclass TransferhtmlForm extends Component<{}, ITransferhtmlFormState> {\r\n\r\n  state: ITransferhtmlFormState = {\r\n    date: new Date(),\r\n    branchName: '',\r\n    htmlForeignRemittances: false,\r\n    eft: false,\r\n    rtgs: false,\r\n    rtgsLocal: false,\r\n    eaps: false,\r\n    repss: false,\r\n    htmlForeignDraft: false,\r\n\r\n    currency: '',\r\n    amount: '',\r\n    rate: '',\r\n    qrCodeResult: ''\r\n  }\r\n\r\n  asHTMLInputElement = (id: string): HTMLInputElement => (document.getElementById(id) as HTMLInputElement)!\r\n\r\n  handleDate = (date: any): Date => {\r\n    this.setState({ date: new Date(date) })\r\n    console.log(this.state.date)\r\n    return this.state.date\r\n  }\r\n\r\n  handleBranchName = (e: ChangeEvent<HTMLInputElement>): string => {\r\n    this.setState({ branchName: e.target.value })\r\n    console.log('branch name: ', this.state.branchName);\r\n    return this.state.branchName;\r\n  }\r\n\r\n  providePDFValues = (): string => {\r\n    let result = '';\r\n    Object.entries(this.state).map(([key, value], i) => {\r\n      result = result.concat(value).concat(\";\");\r\n      this.setState({ qrCodeResult: result })\r\n    });\r\n    return this.state.qrCodeResult;\r\n  }\r\n\r\n  pdfMakeSample(): void {\r\n    const docDefinition = {\r\n      content: [{\r\n\r\n        table: {\r\n          headerRows: 1,\r\n          widths: ['*', 'auto', 100, '*'],\r\n          body: [\r\n            ['First', 'Second', 'Third', 'Последняя'],\r\n            ['Value 1', 'Value 2', 'Value 3', 'Value 4'],\r\n            [{ text: 'Bold value', bold: true }, 'Val 2', 'Val 3', 'Чё']\r\n          ]\r\n        }\r\n      }]\r\n    };\r\n    pdfMake.createPdf(docDefinition).download('pdfmake.pdf');\r\n\r\n    const pdfDoc = pdfMake.createPdf(docDefinition);\r\n    pdfDoc.download(\"testdoc.pdf\");\r\n  }\r\n\r\n  pdfMakeStylingSample = (): void => {\r\n\r\n    console.log('tetetetete:', this.state.qrCodeResult)\r\n    const documentDefinition = {\r\n\r\n      content: [//start content\r\n\r\n        // 'this is a standard paragraph, using default style',\r\n\r\n        { text: this.state.branchName, fontSize: 15 },\r\n\r\n        {\r\n          text: [\r\n\r\n            { text: this.state.qrCodeResult, fontSize: 15 },\r\n\r\n          ]\r\n        },\r\n\r\n        {\r\n          qr: `${this.state.branchName};${this.state.date}`,\r\n          fit: 250\r\n        }\r\n\r\n      ]// end content\r\n    };\r\n    pdfMake.createPdf(documentDefinition).download(\"styling_test.pdf\")\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n      <Main>\r\n\r\n        <Header />\r\n\r\n        <Sidebar />\r\n\r\n        <MainBody>\r\n\r\n          <h2 style={{ textAlign: 'center' }}>FUNDS TRANSFER REQUEST</h2>\r\n          <img src={logo} />\r\n\r\n          <h6>*PLEASE FILL THE htmlForM IN CAPITAL/BLOCK LETTER*</h6>\r\n\r\n          {/* start branch name and date */}\r\n\r\n          {/* <Checkbox label=\"htmlForeign Remittances\" flag={this.state.htmlForeignRemittances} /> */}\r\n\r\n          {/* <Checkbox label=\"EFT\" flag={this.state.htmlForeignRemittances} /> */}\r\n\r\n          {/* <Checkbox label=\"RTGS\" flag={this.state.htmlForeignRemittances} />\r\n\r\n            <Checkbox label=\"RTGS (Local)\" flag={this.state.htmlForeignRemittances} />\r\n\r\n            <Checkbox label=\"EAPS\" flag={this.state.htmlForeignRemittances} />\r\n\r\n            <Checkbox label=\"REPSS\" flag={this.state.htmlForeignRemittances} />\r\n\r\n            <Checkbox label=\"htmlForeign Draft\" flag={this.state.htmlForeignRemittances} /> */}\r\n\r\n          <form>\r\n            <div className=\"form-row\">\r\n\r\n              <div className=\"form-group col-md-6\">\r\n                <label htmlFor=\"branchName\">Branch Name</label>\r\n                <input value={this.state.branchName} onChange={this.handleBranchName} />\r\n              </div>\r\n\r\n              <div className=\"form-group col-md-6\">\r\n                <label htmlFor=\"date\">Date</label>\r\n                <DatePicker onChange={this.handleDate} selected={this.state.date} />\r\n              </div>\r\n              {/*      \r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"inputAddress\">Address</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"inputAddress\" placeholder=\"1234 Main St\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"inputAddress2\">Address 2</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"inputAddress2\" placeholder=\"Apartment, studio, or floor\" />\r\n            </div>\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group col-md-6\">\r\n                <label htmlFor=\"inputCity\">City</label>\r\n                <input type=\"text\" className=\"form-control\" id=\"inputCity\" />\r\n              </div>\r\n              <div className=\"form-group col-md-4\">\r\n                <label htmlFor=\"inputState\">State</label>\r\n                <select id=\"inputState\" className=\"form-control\">\r\n                  <option selected>Choose...</option>\r\n                  <option>...</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"form-group col-md-2\">\r\n                <label htmlFor=\"inputZip\">Zip</label>\r\n                <input type=\"text\" className=\"form-control\" id=\"inputZip\" />\r\n              </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <div className=\"form-check\">\r\n                <input className=\"form-check-input\" type=\"checkbox\" id=\"gridCheck\" />\r\n                <label className=\"form-check-label\" htmlFor=\"gridCheck\">\r\n                  Check me out\r\n      </label>\r\n              </div>\r\n               */}\r\n            </div>\r\n            {/* <button type=\"submit\" className=\"btn btn-primary\">Sign in</button> */}\r\n          </form>\r\n\r\n          <div>\r\n            <button className=\"btn btn-primary m-1\" id=\"saveButton\" onClick={this.pdfMakeStylingSample}>Generate PDF</button>\r\n          </div>\r\n\r\n        </MainBody>\r\n\r\n      </Main >\r\n    );\r\n  }\r\n}\r\n\r\nexport default TransferhtmlForm;","E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\scan\\HandleQRCodeWriting.ts",["152"],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\subcomponents\\DatePicker.tsx",[],["153","154"],"E:\\projects\\js\\react\\qr-code-scan\\qr-code-scan-sample\\src\\components\\subcomponents\\Checkbox.tsx",[],{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"155","replacedBy":"159"},{"ruleId":"157","replacedBy":"160"},{"ruleId":"161","severity":1,"message":"162","line":1,"column":13,"nodeType":"163","messageId":"164","endLine":1,"endColumn":18},{"ruleId":"161","severity":1,"message":"165","line":2,"column":10,"nodeType":"163","messageId":"164","endLine":2,"endColumn":34},{"ruleId":"161","severity":1,"message":"166","line":3,"column":8,"nodeType":"163","messageId":"164","endLine":3,"endColumn":11},{"ruleId":"161","severity":1,"message":"167","line":11,"column":36,"nodeType":"163","messageId":"164","endLine":11,"endColumn":48},{"ruleId":"161","severity":1,"message":"168","line":29,"column":9,"nodeType":"163","messageId":"164","endLine":29,"endColumn":16},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"155","replacedBy":"169"},{"ruleId":"157","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":26,"column":57,"nodeType":"173","messageId":"174","endLine":26,"endColumn":59},{"ruleId":"155","replacedBy":"175"},{"ruleId":"157","replacedBy":"176"},{"ruleId":"161","severity":1,"message":"177","line":3,"column":43,"nodeType":"163","messageId":"164","endLine":3,"endColumn":47},{"ruleId":"155","replacedBy":"178"},{"ruleId":"157","replacedBy":"179"},{"ruleId":"161","severity":1,"message":"180","line":2,"column":10,"nodeType":"163","messageId":"164","endLine":2,"endColumn":15},{"ruleId":"161","severity":1,"message":"181","line":12,"column":8,"nodeType":"163","messageId":"164","endLine":12,"endColumn":18},{"ruleId":"171","severity":1,"message":"182","line":77,"column":54,"nodeType":"173","messageId":"183","endLine":77,"endColumn":56},{"ruleId":"184","severity":1,"message":"185","line":147,"column":11,"nodeType":"186","endLine":147,"endColumn":29},{"ruleId":"161","severity":1,"message":"187","line":13,"column":7,"nodeType":"163","messageId":"164","endLine":13,"endColumn":10},{"ruleId":"155","replacedBy":"188"},{"ruleId":"157","replacedBy":"189"},"no-native-reassign",["190"],"no-negated-in-lhs",["191"],["190"],["191"],"@typescript-eslint/no-unused-vars","'ZXing' is defined but never used.","Identifier","unusedVar","'BrowserMultiFormatReader' is defined but never used.","'Dom' is defined but never used.","'PDF417Reader' is defined but never used.","'mystyle' is assigned a value but never used.",["190"],["191"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["190"],["191"],"'Link' is defined but never used.",["190"],["191"],"'jsPDF' is defined but never used.","'Datepicker' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'svg' is assigned a value but never used.",["190"],["191"],"no-global-assign","no-unsafe-negation"]